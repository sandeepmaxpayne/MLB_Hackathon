# -*- coding: utf-8 -*-
"""MLB-Tip-generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C-_S1DKP25n3l4gHRv3y-vVTJoQML08-
"""

#@title Import Python Libraries
# General data science libraries
import pandas as pd
import numpy as np

# Pulling data from APIs, parsing JSON
import requests
import json


# Plotting
import matplotlib.pyplot as plt
import seaborn as sns

# notebook.ipynb
def my_function(x):
    # Original function
    return x * 2

result = my_function(5)
print(result)

pd.set_option('display.max_colwidth', 200)
def load_newline_delimited_json(url):
    """Loads a newline-delimited JSON file from a URL into a pandas DataFrame.

    Args:
        url: The URL of the newline-delimited JSON file.

    Returns:
        A pandas DataFrame containing the data, or None if an error occurs.
    """
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception for bad status codes

        data = []
        for line in response.text.strip().split('\n'):
            try:
                data.append(json.loads(line))
            except json.JSONDecodeError as e:
                print(f"Skipping invalid JSON line: {line} due to error: {e}")

        return pd.DataFrame(data)
    except requests.exceptions.RequestException as e:
        print(f"Error downloading data: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None

#@title Function to Process Results from Various MLB Stats API Endpoints
def process_endpoint_url(endpoint_url, pop_key=None):
  """
  Fetches data from a URL, parses JSON, and optionally pops a key.

  Args:
    endpoint_url: The URL to fetch data from.
    pop_key: The key to pop from the JSON data (optional, defaults to None).

  Returns:
    A pandas DataFrame containing the processed data
  """
  json_result = requests.get(endpoint_url).content

  data = json.loads(json_result)

   # if pop_key is provided, pop key and normalize nested fields
  if pop_key:
    df_result = pd.json_normalize(data.pop(pop_key), sep = '_')
  # if pop_key is not provided, normalize entire json
  else:
    df_result = pd.json_normalize(data)

  return df_result

sports_endpoint_url = 'https://statsapi.mlb.com/api/v1/sports'

sports = process_endpoint_url(sports_endpoint_url, 'sports')


#@title Leagues

# Can add "?sportId=1" to following URL for MLB only
leagues_endpoint_url = 'https://statsapi.mlb.com/api/v1/league'

leagues = process_endpoint_url(leagues_endpoint_url, 'leagues')


#@title Seasons

# Use "?sportId=1" in following URL for MLB only
# Can also add "&withGameTypeDates=true" at end to get much more info on games
seasons_endpoint_url = 'https://statsapi.mlb.com/api/v1/seasons/all?sportId=1'

seasons = process_endpoint_url(seasons_endpoint_url, 'seasons')


#@title All Players from 1 Season

# Pick single season to get all players for (default is 2024)
season = 2024 # @param {type:"integer"}

single_season_players_url = f'https://statsapi.mlb.com/api/v1/sports/1/players?season={season}'

players = process_endpoint_url(single_season_players_url, 'people')


#@title Teams
# Use "?sportId=1" in following URL for MLB only
teams_endpoint_url = 'https://statsapi.mlb.com/api/v1/teams?sportId=1'

teams = process_endpoint_url(teams_endpoint_url, 'teams')


#@title Single Team Roster

# Pick single team ID to get roster for (default is 119 for Dodgers)
team_id = 119 # @param {type:"integer"}

single_team_roster_url = f'https://statsapi.mlb.com/api/v1/teams/{team_id}/roster?season=2025'

single_team_roster = process_endpoint_url(single_team_roster_url, 'roster')


#@title Single Player Information
# Pick single player ID to get info for (default is 660271 for Shohei Ohtani)
player_id = 660271 # @param {type:"integer"}

single_player_url = f'https://statsapi.mlb.com/api/v1/people/{player_id}/'

single_player_info_json = json.loads(requests.get(single_player_url).content)

#@title Schedule / Games

# Pick single season to get schedule for (default is 2024)
season = 2024 # @param {type:"integer"}

# Can change season to get other seasons' games info
schedule_endpoint_url = f'https://statsapi.mlb.com/api/v1/schedule?sportId=1&season={season}'

schedule_dates = process_endpoint_url(schedule_endpoint_url, "dates")

games = pd.json_normalize(
    schedule_dates.explode('games').reset_index(drop = True)['games'])

#@title Read in MLB Fan Favorites/Follows Data from Google Cloud Storage
mlb_fan_favorites_json_file = 'https://storage.googleapis.com/gcp-mlb-hackathon-2025/datasets/mlb-fan-content-interaction-data/2025-mlb-fan-favs-follows.json'

mlb_fan_favorites_df = load_newline_delimited_json(mlb_fan_favorites_json_file)

# Convert favorite team ID to integer format
mlb_fan_favorites_df['favorite_team_id'] = (
  mlb_fan_favorites_df['favorite_team_id'].astype('Int64'))

#@title Look at Most Common Favorite MLB Teams
most_common_favorite_teams = (pd.merge(
  mlb_fan_favorites_df['favorite_team_id'].value_counts().reset_index().
    rename(columns = {"count": "num_favorites"}),
  teams[['id', 'name']].
    rename(columns = {"id": "team_id", "name": "team_name"}),
  left_on = 'favorite_team_id',
  right_on = 'team_id',
  how = 'left'
  )[['team_id', 'team_name', 'num_favorites']]
  )

# Create barplot showing most common favorite MLB teams
plt.figure(figsize=(12, 8))
sns.barplot(x='num_favorites', y='team_name', data=most_common_favorite_teams,
    orient='h', color='blue')
plt.title('Most Common Favorite MLB Teams')
plt.xlabel('Number of Favorites')
plt.ylabel('Team Name')

# Add text labels for # of favorites next to each bar
for index, row in most_common_favorite_teams.iterrows():
  plt.text(row['num_favorites'], index, str(row['num_favorites']),
    color='black', ha='left', va='center')

#@title Look at Most Followed MLB Teams

# Explode the 'followed_team_ids' column to create 1 row for each followed team
mlb_fan_follows_expanded_df = (mlb_fan_favorites_df.
  explode('followed_team_ids').
  reset_index(drop=True)
  )

# Convert followed team IDs to integer format
mlb_fan_follows_expanded_df['followed_team_ids'] = (
  mlb_fan_follows_expanded_df['followed_team_ids'].astype('Int64'))

most_followed_teams = (pd.merge(
  mlb_fan_follows_expanded_df['followed_team_ids'].value_counts().reset_index().
    rename(columns = {"count": "num_followers"}),
  teams[['id', 'name']].
    rename(columns = {"id": "team_id", "name": "team_name"}),
  left_on = 'followed_team_ids',
  right_on = 'team_id',
  how = 'left'
  )[['team_id', 'team_name', 'num_followers']]
  )

# Create barplot showing most followed MLB teams
plt.figure(figsize=(12, 8))
sns.barplot(x='num_followers', y='team_name', data=most_followed_teams,
    orient='h', color='blue')
plt.title('Most Followed MLB Teams')
plt.xlabel('Number of Followers')
plt.ylabel('Team Name')

# Add text labels for # of followers next to each bar
for index, row in most_followed_teams.iterrows():
  plt.text(row['num_followers'], index, str(row['num_followers']),
    color='black', ha='left', va='center')


#@title Look at Most Followed MLB Players

# Explode 'followed_player_ids' column to create 1 row for each followed player
mlb_fan_followed_players_expanded_df = (mlb_fan_favorites_df.
  explode('followed_player_ids').
  reset_index(drop=True)
  )

# Convert followed player IDs to integer format
mlb_fan_followed_players_expanded_df['followed_player_ids'] = (
  mlb_fan_followed_players_expanded_df['followed_player_ids'].astype('Int64'))

# Get list of Top N players by number of followers (including player names)
most_followed_players = (pd.merge(
  mlb_fan_followed_players_expanded_df['followed_player_ids'].
    value_counts().
    reset_index().
    rename(
      columns = {
        "followed_player_ids": "player_id",
        "count": "num_followers"
        }),
  players[['id', 'nameFirstLast']].
    rename(
      columns = {"id": "player_id", "nameFirstLast": "player_name"}
      ),
  on = 'player_id',
  how = 'left'
  ).
  # Filter to top 50 players
  nlargest(50, 'num_followers')
  )

most_followed_players

# Create barplot showing most followed MLB players
plt.figure(figsize=(12, 8))
sns.barplot(x='num_followers', y='player_name', data=most_followed_players,
    orient='h', color='blue')
plt.title('Most Followed MLB Players')
plt.xlabel('Number of Followers')
plt.ylabel('Player Name')

# Add text labels for # of followers next to each bar
for index, row in most_followed_players.iterrows():
  plt.text(row['num_followers'], index, str(row['num_followers']),
    color='black', ha='left', va='center')

#@title Get MLB Film Room Video Clip for Last Play from Specific Game
# Pick game to get last play from (default is game_pk 747066, for Braves-Royals
# game with Travis d'Arnaud walk-off HR on 9/28/2024)
game_pk = '747066' #@param{type:"string"}

single_game_feed_url = f'https://statsapi.mlb.com/api/v1.1/game/{game_pk}/feed/live'

single_game_info_json = json.loads(requests.get(single_game_feed_url).content)

single_game_play = single_game_info_json['liveData']['plays']['currentPlay']

single_game_play_id = single_game_play['playEvents'][-1]['playId']

single_play_video_url = f'https://www.mlb.com/video/search?q=playid=\"{single_game_play_id}\"'

from vertexai.preview.generative_models import GenerativeModel
def generate_tagline(User_input):    
  
  model = GenerativeModel("gemini-2.0-flash-exp")


  prompt = f""" 
  Baseball Tournament Fans Club. Help fans to create catchy taglines for their teams.

  input: {players, single_player_info_json, most_followed_players, most_common_favorite_teams, most_followed_teams, seasons}
  output: Players or Teams related details

  input: {schedule_dates}
  output: Match on scheduled dates

  input: {players, most_followed_players, most_common_favorite_teams, most_followed_teams}
  output: Players or Teams related details

  input: {games, single_player_info_json, teams, single_game_info_json, single_game_play, seasons, most_common_favorite_teams}
  output: Baseball game information

  input: {schedule_dates}
  output: Match on scheduled dates
    
  input: short tip on {sports}
  output: Team or player or baseball sport tip
    
  input: {User_input}
  output: {User_input}
  """

  responses = model.generate_content( 
    prompt,
    generation_config={
        "temperature": 1,
        "max_output_tokens": 1024,
        "top_p": 1.0,
        "top_k": 40,
    },
    stream=True
    )
  p = []
  for response in responses:
    p.append(response.text)
    print(p)
    print(response.text)
  return "\n".join(p)
